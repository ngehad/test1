name: Check PR Line Additions

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check_lines:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install GitHub CLI
        run: sudo apt-get install -y gh

      - name: Check line additions
        id: check_lines
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          ADDITIONS=$(gh pr view $PR_NUMBER --json additions --jq '.additions')

          # Define arrays of success and failure messages with emojis
          SUCCESS_MESSAGES=("🎉 Awesome job! PR line additions are within the limit. Keep up the great work!" "👏 Great work! This PR is within the 400-line limit. Nice job!" "🌟 Fantastic! Your PR is concise and within the limit. Keep it up!")
          FAILURE_MESSAGES=("📏 This PR is a bit too long! Try splitting it into smaller parts. Keeping PRs under 400 lines helps everyone stay focused. Current: $ADDITIONS" "🚧 Oops! This PR is over 400 lines. Breaking it into smaller pieces will help. Current: $ADDITIONS" "⚠️ This PR is longer than 400 lines. Please break it into smaller chunks for better readability. Current: $ADDITIONS")

          # Function to get a random message
          get_random_message() {
            local messages=("$@")
            echo "${messages[$((RANDOM % ${#messages[@]}))]}"
          }

          # Choose a random message based on the result
          if [ $ADDITIONS -gt 400 ]; then
            MESSAGE=$(get_random_message "${FAILURE_MESSAGES[@]}")
            echo "STATUS=failure" >> $GITHUB_ENV
            echo "MESSAGE=$MESSAGE" >> $GITHUB_ENV
            exit 1
          else
            MESSAGE=$(get_random_message "${SUCCESS_MESSAGES[@]}")
            echo "STATUS=success" >> $GITHUB_ENV
            echo "MESSAGE=$MESSAGE" >> $GITHUB_ENV
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set PR status
        uses: actions/github-script@v6
        with:
          script: |
            const { context, github } = require('@actions/github');

            const status = process.env.STATUS;
            const message = process.env.MESSAGE;

            await github.rest.checks.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: 'Check PR Line Additions',
              head_sha: context.sha,
              status: 'completed',
              conclusion: status,
              output: {
                title: 'PR Line Additions Check',
                summary: message,
              },
            });
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
